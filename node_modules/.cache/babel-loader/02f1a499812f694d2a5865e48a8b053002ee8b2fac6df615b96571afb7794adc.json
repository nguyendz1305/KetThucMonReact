{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faSun,faCloudSun,faCloudRain,faSnowflake,faCloud}from\"@fortawesome/free-solid-svg-icons\";import\"./Weather.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Weather=()=>{const[city,setCity]=useState(\"\");// Thành phố người dùng chọn\nconst[weatherData,setWeatherData]=useState(null);// Dữ liệu thời tiết\nconst[error,setError]=useState(\"\");// Thông báo lỗi\nconst[loading,setLoading]=useState(false);// Trạng thái tải dữ liệu\nconst[unit,setUnit]=useState(\"metric\");// Đơn vị Celsius (metric) hoặc Fahrenheit (imperial)\nconst[isWeatherFetched,setIsWeatherFetched]=useState(false);// Kiểm tra dữ liệu đã được lấy chưa\nconst API_KEY=\"973fff3498ae9327464ee9d4138e5f7c\";const cities=[\"Athens\",// Hy Lạp\n\"Bangkok\",// Thái Lan\n\"Barcelona\",// Tây Ban Nha\n\"Beijing\",// Trung Quốc\n\"Berlin\",// Đức\n\"Buenos Aires\",// Argentina\n\"Cairo\",// Ai Cập\n\"Cape Town\",// Nam Phi\n\"Chicago\",// Mỹ\n\"Dubai\",// UAE\n\"Hanoi\",//VietNam\n\"Hong Kong\",// Hồng Kông\n\"Istanbul\",// Thổ Nhĩ Kỳ\n\"Jakarta\",// Indonesia\n\"Kuala Lumpur\",// Malaysia\n\"Lagos\",// Nigeria\n\"London\",// Anh\n\"Los Angeles\",// Mỹ\n\"Madrid\",// Tây Ban Nha\n\"Mexico City\",// Mexico\n\"Moscow\",// Nga\n\"Mumbai\",// Ấn Độ\n\"New York\",// Mỹ\n\"Paris\",// Pháp\n\"Rio de Janeiro\",// Brazil\n\"Rome\",// Ý\n\"San Francisco\",// Mỹ\n\"Seoul\",// Hàn Quốc\n\"Shanghai\",// Trung Quốc\n\"Singapore\",// Singapore\n\"Sydney\",// Úc\n\"Tokyo\",// Nhật Bản\n\"Toronto\"// Canada\n];// Hàm làm tròn kết quả đến 1 chữ số thập phân\nconst roundToOneDecimal=value=>{return Math.round(value*10)/10;};// Hàm để lấy dữ liệu thời tiết từ API\nconst fetchWeather=async()=>{if(!city){setError(\"Vui lòng chọn một thành phố!\");return;}setLoading(true);try{setError(\"\");const response=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${API_KEY}&lang=vi`);if(!response.ok){if(response.status===404){throw new Error(\"Không tìm thấy thành phố! Vui lòng kiểm tra lại.\");}throw new Error(\"Đã xảy ra lỗi. Vui lòng thử lại sau.\");}const data=await response.json();setWeatherData(data);setIsWeatherFetched(true);}catch(err){if(err instanceof Error){setError(err.message);}else{setError(\"Đã xảy ra lỗi không xác định.\");}setWeatherData(null);setIsWeatherFetched(false);}finally{setLoading(false);}};// Hàm chuyển đổi đơn vị khi nhấn vào \"Chuyển sang °F\" hoặc \"Chuyển sang °C\"\nconst toggleUnit=()=>{setUnit(unit===\"metric\"?\"imperial\":\"metric\");};// Hàm lấy biểu tượng thời tiết tương ứng\nconst getIcon=icon=>{switch(icon){case\"01d\":return/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faSun,className:\"weather-icon\"});case\"02d\":case\"02n\":return/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCloudSun,className:\"weather-icon\"});case\"03d\":case\"03n\":case\"04d\":case\"04n\":return/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCloud,className:\"weather-icon\"});case\"09d\":case\"09n\":case\"10d\":case\"10n\":return/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCloudRain,className:\"weather-icon\"});case\"13d\":case\"13n\":return/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faSnowflake,className:\"weather-icon\"});default:return/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCloud,className:\"weather-icon\"});}};// Hàm xử lý khi thay đổi thành phố\nconst handleCityChange=e=>{setCity(e.target.value);setWeatherData(null);// Reset dữ liệu thời tiết\nsetIsWeatherFetched(false);// Reset trạng thái đã lấy dữ liệu\n};useEffect(()=>{// Khi người dùng chọn thành phố, mặc định sẽ lấy dữ liệu với Celsius (°C)\nif(city){fetchWeather();}},[city,unit]);// Khi thay đổi city hoặc unit, sẽ cập nhật lại dữ liệu thời tiết\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"weather-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u1EE8ng D\\u1EE5ng Th\\u1EDDi Ti\\u1EBFt\"}),/*#__PURE__*/_jsxs(\"select\",{value:city,onChange:handleCityChange// Gọi hàm khi thay đổi thành phố\n,className:\"city-dropdown\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Ch\\u1ECDn th\\xE0nh ph\\u1ED1\"}),cities.map((cityName,index)=>/*#__PURE__*/_jsx(\"option\",{value:cityName,children:cityName},index))]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:fetchWeather,className:\"weather-button\",children:loading?\"Đang tải...\":\"Lấy thời tiết\"}),isWeatherFetched&&/*#__PURE__*/_jsxs(\"button\",{onClick:toggleUnit,className:\"weather-button\",children:[\"Chuy\\u1EC3n sang \",unit===\"metric\"?\"°F\":\"°C\"]})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:error}),weatherData&&/*#__PURE__*/_jsxs(\"div\",{className:\"weather-info\",children:[/*#__PURE__*/_jsx(\"h2\",{children:weatherData.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"weather-condition\",children:[getIcon(weatherData.weather[0].icon),/*#__PURE__*/_jsxs(\"p\",{children:[\"Nhi\\u1EC7t \\u0111\\u1ED9:\",\" \",/*#__PURE__*/_jsxs(\"span\",{children:[unit===\"metric\"?roundToOneDecimal(weatherData.main.temp):roundToOneDecimal(weatherData.main.temp),\" \",unit===\"metric\"?\"°C\":\"°F\"]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u0110\\u1ED9 \\u1EA9m: \",/*#__PURE__*/_jsxs(\"span\",{children:[weatherData.main.humidity,\"%\"]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"T\\xECnh tr\\u1EA1ng: \",/*#__PURE__*/_jsx(\"span\",{children:weatherData.weather[0].description})]})]})]})]});};export default Weather;","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faSun","faCloudSun","faCloudRain","faSnowflake","faCloud","jsx","_jsx","jsxs","_jsxs","Weather","city","setCity","weatherData","setWeatherData","error","setError","loading","setLoading","unit","setUnit","isWeatherFetched","setIsWeatherFetched","API_KEY","cities","roundToOneDecimal","value","Math","round","fetchWeather","response","fetch","ok","status","Error","data","json","err","message","toggleUnit","getIcon","icon","className","handleCityChange","e","target","children","onChange","map","cityName","index","onClick","name","weather","main","temp","humidity","description"],"sources":["C:/Users/hp/Documents/NguyenVuNguyen/src/components/Weather.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faSun,\r\n  faCloudSun,\r\n  faCloudRain,\r\n  faSnowflake,\r\n  faCloud,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Weather.css\";\r\n\r\ninterface WeatherData {\r\n  name: string;\r\n  weather: Array<{ icon: string; description: string }>;\r\n  main: { temp: number; humidity: number };\r\n}\r\n\r\nconst Weather = () => {\r\n  const [city, setCity] = useState<string>(\"\"); // Thành phố người dùng chọn\r\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null); // Dữ liệu thời tiết\r\n  const [error, setError] = useState<string>(\"\"); // Thông báo lỗi\r\n  const [loading, setLoading] = useState<boolean>(false); // Trạng thái tải dữ liệu\r\n  const [unit, setUnit] = useState<\"metric\" | \"imperial\">(\"metric\"); // Đơn vị Celsius (metric) hoặc Fahrenheit (imperial)\r\n  const [isWeatherFetched, setIsWeatherFetched] = useState<boolean>(false); // Kiểm tra dữ liệu đã được lấy chưa\r\n\r\n  const API_KEY = \"973fff3498ae9327464ee9d4138e5f7c\";\r\n  const cities = [\r\n    \"Athens\", // Hy Lạp\r\n    \"Bangkok\", // Thái Lan\r\n    \"Barcelona\", // Tây Ban Nha\r\n    \"Beijing\", // Trung Quốc\r\n    \"Berlin\", // Đức\r\n    \"Buenos Aires\", // Argentina\r\n    \"Cairo\", // Ai Cập\r\n    \"Cape Town\", // Nam Phi\r\n    \"Chicago\", // Mỹ\r\n    \"Dubai\", // UAE\r\n    \"Hanoi\", //VietNam\r\n    \"Hong Kong\", // Hồng Kông\r\n    \"Istanbul\", // Thổ Nhĩ Kỳ\r\n    \"Jakarta\", // Indonesia\r\n    \"Kuala Lumpur\", // Malaysia\r\n    \"Lagos\", // Nigeria\r\n    \"London\", // Anh\r\n    \"Los Angeles\", // Mỹ\r\n    \"Madrid\", // Tây Ban Nha\r\n    \"Mexico City\", // Mexico\r\n    \"Moscow\", // Nga\r\n    \"Mumbai\", // Ấn Độ\r\n    \"New York\", // Mỹ\r\n    \"Paris\", // Pháp\r\n    \"Rio de Janeiro\", // Brazil\r\n    \"Rome\", // Ý\r\n    \"San Francisco\", // Mỹ\r\n    \"Seoul\", // Hàn Quốc\r\n    \"Shanghai\", // Trung Quốc\r\n    \"Singapore\", // Singapore\r\n    \"Sydney\", // Úc\r\n    \"Tokyo\", // Nhật Bản\r\n    \"Toronto\", // Canada\r\n  ];\r\n\r\n  // Hàm làm tròn kết quả đến 1 chữ số thập phân\r\n  const roundToOneDecimal = (value: number) => {\r\n    return Math.round(value * 10) / 10;\r\n  };\r\n\r\n  // Hàm để lấy dữ liệu thời tiết từ API\r\n  const fetchWeather = async () => {\r\n    if (!city) {\r\n      setError(\"Vui lòng chọn một thành phố!\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      setError(\"\");\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${API_KEY}&lang=vi`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          throw new Error(\"Không tìm thấy thành phố! Vui lòng kiểm tra lại.\");\r\n        }\r\n        throw new Error(\"Đã xảy ra lỗi. Vui lòng thử lại sau.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setWeatherData(data);\r\n      setIsWeatherFetched(true);\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        setError(err.message);\r\n      } else {\r\n        setError(\"Đã xảy ra lỗi không xác định.\");\r\n      }\r\n      setWeatherData(null);\r\n      setIsWeatherFetched(false);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Hàm chuyển đổi đơn vị khi nhấn vào \"Chuyển sang °F\" hoặc \"Chuyển sang °C\"\r\n  const toggleUnit = () => {\r\n    setUnit(unit === \"metric\" ? \"imperial\" : \"metric\");\r\n  };\r\n\r\n  // Hàm lấy biểu tượng thời tiết tương ứng\r\n  const getIcon = (icon: string) => {\r\n    switch (icon) {\r\n      case \"01d\":\r\n        return <FontAwesomeIcon icon={faSun} className=\"weather-icon\" />;\r\n      case \"02d\":\r\n      case \"02n\":\r\n        return <FontAwesomeIcon icon={faCloudSun} className=\"weather-icon\" />;\r\n      case \"03d\":\r\n      case \"03n\":\r\n      case \"04d\":\r\n      case \"04n\":\r\n        return <FontAwesomeIcon icon={faCloud} className=\"weather-icon\" />;\r\n      case \"09d\":\r\n      case \"09n\":\r\n      case \"10d\":\r\n      case \"10n\":\r\n        return <FontAwesomeIcon icon={faCloudRain} className=\"weather-icon\" />;\r\n      case \"13d\":\r\n      case \"13n\":\r\n        return <FontAwesomeIcon icon={faSnowflake} className=\"weather-icon\" />;\r\n      default:\r\n        return <FontAwesomeIcon icon={faCloud} className=\"weather-icon\" />;\r\n    }\r\n  };\r\n\r\n  // Hàm xử lý khi thay đổi thành phố\r\n  const handleCityChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setCity(e.target.value);\r\n    setWeatherData(null); // Reset dữ liệu thời tiết\r\n    setIsWeatherFetched(false); // Reset trạng thái đã lấy dữ liệu\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Khi người dùng chọn thành phố, mặc định sẽ lấy dữ liệu với Celsius (°C)\r\n    if (city) {\r\n      fetchWeather();\r\n    }\r\n  }, [city, unit]); // Khi thay đổi city hoặc unit, sẽ cập nhật lại dữ liệu thời tiết\r\n\r\n  return (\r\n    <div className=\"weather-container\">\r\n      <h1>Ứng Dụng Thời Tiết</h1>\r\n\r\n      <select\r\n        value={city}\r\n        onChange={handleCityChange} // Gọi hàm khi thay đổi thành phố\r\n        className=\"city-dropdown\"\r\n      >\r\n        <option value=\"\">Chọn thành phố</option>\r\n        {cities.map((cityName, index) => (\r\n          <option key={index} value={cityName}>\r\n            {cityName}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <div className=\"button-group\">\r\n        <button onClick={fetchWeather} className=\"weather-button\">\r\n          {loading ? \"Đang tải...\" : \"Lấy thời tiết\"}\r\n        </button>\r\n        {isWeatherFetched && (\r\n          <button onClick={toggleUnit} className=\"weather-button\">\r\n            Chuyển sang {unit === \"metric\" ? \"°F\" : \"°C\"}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {error && <p className=\"error\">{error}</p>}\r\n\r\n      {weatherData && (\r\n        <div className=\"weather-info\">\r\n          <h2>{weatherData.name}</h2>\r\n          <div className=\"weather-condition\">\r\n            {getIcon(weatherData.weather[0].icon)}\r\n            <p>\r\n              Nhiệt độ:{\" \"}\r\n              <span>\r\n                {unit === \"metric\"\r\n                  ? roundToOneDecimal(weatherData.main.temp)\r\n                  : roundToOneDecimal(weatherData.main.temp)}{\" \"}\r\n                {unit === \"metric\" ? \"°C\" : \"°F\"}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              Độ ẩm: <span>{weatherData.main.humidity}%</span>\r\n            </p>\r\n            <p>\r\n              Tình trạng: <span>{weatherData.weather[0].description}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}